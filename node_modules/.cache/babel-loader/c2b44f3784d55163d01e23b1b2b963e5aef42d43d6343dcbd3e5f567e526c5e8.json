{"ast":null,"code":"var _jsxFileName = \"/home/sifann/workspace/src/contexts/LanguageContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport CircularProgress from '@mui/material/CircularProgress';\nimport Box from '@mui/material/Box';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LanguageContext = /*#__PURE__*/createContext();\nexport const useLanguage = () => {\n  _s();\n  const context = useContext(LanguageContext);\n  if (!context) {\n    throw new Error('useLanguage must be used within a LanguageProvider');\n  }\n  return context;\n};\n_s(useLanguage, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const LanguageProvider = ({\n  children\n}) => {\n  _s2();\n  const [currentLanguage, setCurrentLanguage] = useState(() => {\n    // Try to get language from localStorage\n    const savedLang = localStorage.getItem('preferredLanguage');\n    if (savedLang) return savedLang;\n\n    // Try to detect browser language\n    const browserLang = navigator.language.split('-')[0];\n    // Only include languages we have translations for\n    const supportedLanguages = ['en', 'es', 'fr'];\n    return supportedLanguages.includes(browserLang) ? browserLang : 'en';\n  });\n  const [translations, setTranslations] = useState({});\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const loadTranslations = async () => {\n      try {\n        setIsLoading(true);\n        setError(null);\n        console.log(`Loading translations for ${currentLanguage}...`);\n        // Use absolute path for translations\n        const response = await fetch(`${window.location.origin}/locales/${currentLanguage}.json`);\n        if (!response.ok) {\n          throw new Error(`Failed to load ${currentLanguage} translations (status: ${response.status})`);\n        }\n        const data = await response.json();\n        console.log('Loaded translations:', data);\n        if (!data || Object.keys(data).length === 0) {\n          throw new Error('Translation file is empty');\n        }\n        setTranslations(data);\n        console.log('Translations set successfully');\n\n        // Update document language and direction\n        document.documentElement.lang = currentLanguage;\n        document.dir = currentLanguage === 'ar' ? 'rtl' : 'ltr';\n\n        // Save preference\n        localStorage.setItem('preferredLanguage', currentLanguage);\n      } catch (error) {\n        console.error('Error loading translations:', error);\n        setError(error.message);\n\n        // Only fallback to English if we're not already trying to load English\n        if (currentLanguage !== 'en') {\n          console.log('Falling back to English');\n          setCurrentLanguage('en');\n        } else {\n          // If we're already on English and still failing, try to load a hardcoded minimal translation\n          console.log('Loading fallback translations');\n          setTranslations({\n            nav: {\n              home: 'Home',\n              about: 'About',\n              contact: 'Contact',\n              privacy: 'Privacy',\n              sitemap: 'Sitemap',\n              aria: {\n                mainMenu: 'Main navigation menu',\n                home: 'Go to home page',\n                about: 'Go to about page',\n                contact: 'Go to contact page',\n                privacy: 'Go to privacy policy',\n                sitemap: 'Go to sitemap'\n              }\n            }\n          });\n        }\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    loadTranslations();\n  }, [currentLanguage]);\n  const changeLanguage = async langCode => {\n    try {\n      setIsLoading(true);\n      // Pre-load the new language file before changing\n      const response = await fetch(`/locales/${langCode}.json`);\n      if (!response.ok) {\n        throw new Error(`Failed to load ${langCode} translations`);\n      }\n      const data = await response.json();\n      setTranslations(data);\n      setCurrentLanguage(langCode);\n      setError(null);\n    } catch (error) {\n      console.error('Error changing language:', error);\n      setError(error.message);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const t = (key, params = {}) => {\n    if (!translations || Object.keys(translations).length === 0) {\n      return key;\n    }\n    try {\n      const keys = key.split('.');\n      let translation = translations;\n      for (const k of keys) {\n        translation = translation[k];\n        if (translation === undefined) {\n          console.warn(`Translation key not found: ${key}`);\n          return key;\n        }\n      }\n\n      // Replace parameters in translation string\n      let result = translation;\n      Object.entries(params).forEach(([param, value]) => {\n        result = result.replace(`{${param}}`, value);\n      });\n      return result;\n    } catch (error) {\n      console.warn(`Error translating key: ${key}`, error);\n      return key;\n    }\n  };\n  const formatNumber = (number, options = {}) => {\n    try {\n      return new Intl.NumberFormat(currentLanguage, options).format(number);\n    } catch (error) {\n      console.warn('Error formatting number:', error);\n      return number.toString();\n    }\n  };\n  const formatDate = (date, options = {}) => {\n    try {\n      return new Intl.DateTimeFormat(currentLanguage, options).format(date);\n    } catch (error) {\n      console.warn('Error formatting date:', error);\n      return date.toLocaleDateString();\n    }\n  };\n  const value = {\n    currentLanguage,\n    changeLanguage,\n    t,\n    formatNumber,\n    formatDate,\n    isLoading,\n    error,\n    translations\n  };\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(Box, {\n      display: \"flex\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      minHeight: \"100vh\",\n      children: /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 7\n    }, this);\n  }\n  if (error && currentLanguage === 'en') {\n    return /*#__PURE__*/_jsxDEV(Box, {\n      display: \"flex\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      minHeight: \"100vh\",\n      color: \"error.main\",\n      children: [\"Error loading translations: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(LanguageContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 205,\n    columnNumber: 5\n  }, this);\n};\n_s2(LanguageProvider, \"rbIECT1Vs0QVXgxwWurGoRiqADU=\");\n_c = LanguageProvider;\nexport default LanguageContext;\nvar _c;\n$RefreshReg$(_c, \"LanguageProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","CircularProgress","Box","jsxDEV","_jsxDEV","LanguageContext","useLanguage","_s","context","Error","LanguageProvider","children","_s2","currentLanguage","setCurrentLanguage","savedLang","localStorage","getItem","browserLang","navigator","language","split","supportedLanguages","includes","translations","setTranslations","isLoading","setIsLoading","error","setError","loadTranslations","console","log","response","fetch","window","location","origin","ok","status","data","json","Object","keys","length","document","documentElement","lang","dir","setItem","message","nav","home","about","contact","privacy","sitemap","aria","mainMenu","changeLanguage","langCode","t","key","params","translation","k","undefined","warn","result","entries","forEach","param","value","replace","formatNumber","number","options","Intl","NumberFormat","format","toString","formatDate","date","DateTimeFormat","toLocaleDateString","display","justifyContent","alignItems","minHeight","fileName","_jsxFileName","lineNumber","columnNumber","color","Provider","_c","$RefreshReg$"],"sources":["/home/sifann/workspace/src/contexts/LanguageContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\r\nimport CircularProgress from '@mui/material/CircularProgress';\r\nimport Box from '@mui/material/Box';\r\n\r\nconst LanguageContext = createContext();\r\n\r\nexport const useLanguage = () => {\r\n  const context = useContext(LanguageContext);\r\n  if (!context) {\r\n    throw new Error('useLanguage must be used within a LanguageProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const LanguageProvider = ({ children }) => {\r\n  const [currentLanguage, setCurrentLanguage] = useState(() => {\r\n    // Try to get language from localStorage\r\n    const savedLang = localStorage.getItem('preferredLanguage');\r\n    if (savedLang) return savedLang;\r\n\r\n    // Try to detect browser language\r\n    const browserLang = navigator.language.split('-')[0];\r\n    // Only include languages we have translations for\r\n    const supportedLanguages = ['en', 'es', 'fr'];\r\n    return supportedLanguages.includes(browserLang) ? browserLang : 'en';\r\n  });\r\n\r\n  const [translations, setTranslations] = useState({});\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const loadTranslations = async () => {\r\n      try {\r\n        setIsLoading(true);\r\n        setError(null);\r\n        \r\n        console.log(`Loading translations for ${currentLanguage}...`);\r\n        // Use absolute path for translations\r\n        const response = await fetch(`${window.location.origin}/locales/${currentLanguage}.json`);\r\n        if (!response.ok) {\r\n          throw new Error(`Failed to load ${currentLanguage} translations (status: ${response.status})`);\r\n        }\r\n        \r\n        const data = await response.json();\r\n        console.log('Loaded translations:', data);\r\n        \r\n        if (!data || Object.keys(data).length === 0) {\r\n          throw new Error('Translation file is empty');\r\n        }\r\n        \r\n        setTranslations(data);\r\n        console.log('Translations set successfully');\r\n        \r\n        // Update document language and direction\r\n        document.documentElement.lang = currentLanguage;\r\n        document.dir = currentLanguage === 'ar' ? 'rtl' : 'ltr';\r\n        \r\n        // Save preference\r\n        localStorage.setItem('preferredLanguage', currentLanguage);\r\n      } catch (error) {\r\n        console.error('Error loading translations:', error);\r\n        setError(error.message);\r\n        \r\n        // Only fallback to English if we're not already trying to load English\r\n        if (currentLanguage !== 'en') {\r\n          console.log('Falling back to English');\r\n          setCurrentLanguage('en');\r\n        } else {\r\n          // If we're already on English and still failing, try to load a hardcoded minimal translation\r\n          console.log('Loading fallback translations');\r\n          setTranslations({\r\n            nav: {\r\n              home: 'Home',\r\n              about: 'About',\r\n              contact: 'Contact',\r\n              privacy: 'Privacy',\r\n              sitemap: 'Sitemap',\r\n              aria: {\r\n                mainMenu: 'Main navigation menu',\r\n                home: 'Go to home page',\r\n                about: 'Go to about page',\r\n                contact: 'Go to contact page',\r\n                privacy: 'Go to privacy policy',\r\n                sitemap: 'Go to sitemap'\r\n              }\r\n            }\r\n          });\r\n        }\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n\r\n    loadTranslations();\r\n  }, [currentLanguage]);\r\n\r\n  const changeLanguage = async (langCode) => {\r\n    try {\r\n      setIsLoading(true);\r\n      // Pre-load the new language file before changing\r\n      const response = await fetch(`/locales/${langCode}.json`);\r\n      if (!response.ok) {\r\n        throw new Error(`Failed to load ${langCode} translations`);\r\n      }\r\n      const data = await response.json();\r\n      setTranslations(data);\r\n      setCurrentLanguage(langCode);\r\n      setError(null);\r\n    } catch (error) {\r\n      console.error('Error changing language:', error);\r\n      setError(error.message);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const t = (key, params = {}) => {\r\n    if (!translations || Object.keys(translations).length === 0) {\r\n      return key;\r\n    }\r\n\r\n    try {\r\n      const keys = key.split('.');\r\n      let translation = translations;\r\n      \r\n      for (const k of keys) {\r\n        translation = translation[k];\r\n        if (translation === undefined) {\r\n          console.warn(`Translation key not found: ${key}`);\r\n          return key;\r\n        }\r\n      }\r\n      \r\n      // Replace parameters in translation string\r\n      let result = translation;\r\n      Object.entries(params).forEach(([param, value]) => {\r\n        result = result.replace(`{${param}}`, value);\r\n      });\r\n\r\n      return result;\r\n    } catch (error) {\r\n      console.warn(`Error translating key: ${key}`, error);\r\n      return key;\r\n    }\r\n  };\r\n\r\n  const formatNumber = (number, options = {}) => {\r\n    try {\r\n      return new Intl.NumberFormat(currentLanguage, options).format(number);\r\n    } catch (error) {\r\n      console.warn('Error formatting number:', error);\r\n      return number.toString();\r\n    }\r\n  };\r\n\r\n  const formatDate = (date, options = {}) => {\r\n    try {\r\n      return new Intl.DateTimeFormat(currentLanguage, options).format(date);\r\n    } catch (error) {\r\n      console.warn('Error formatting date:', error);\r\n      return date.toLocaleDateString();\r\n    }\r\n  };\r\n\r\n  const value = {\r\n    currentLanguage,\r\n    changeLanguage,\r\n    t,\r\n    formatNumber,\r\n    formatDate,\r\n    isLoading,\r\n    error,\r\n    translations\r\n  };\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <Box \r\n        display=\"flex\" \r\n        justifyContent=\"center\" \r\n        alignItems=\"center\" \r\n        minHeight=\"100vh\"\r\n      >\r\n        <CircularProgress />\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  if (error && currentLanguage === 'en') {\r\n    return (\r\n      <Box \r\n        display=\"flex\" \r\n        justifyContent=\"center\" \r\n        alignItems=\"center\" \r\n        minHeight=\"100vh\"\r\n        color=\"error.main\"\r\n      >\r\n        Error loading translations: {error}\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <LanguageContext.Provider value={value}>\r\n      {children}\r\n    </LanguageContext.Provider>\r\n  );\r\n};\r\n\r\nexport default LanguageContext; "],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,UAAU,EAAEC,SAAS,QAAQ,OAAO;AAC7E,OAAOC,gBAAgB,MAAM,gCAAgC;AAC7D,OAAOC,GAAG,MAAM,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpC,MAAMC,eAAe,gBAAGR,aAAa,CAAC,CAAC;AAEvC,OAAO,MAAMS,WAAW,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC/B,MAAMC,OAAO,GAAGT,UAAU,CAACM,eAAe,CAAC;EAC3C,IAAI,CAACG,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,oDAAoD,CAAC;EACvE;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,EAAA,CANWD,WAAW;AAQxB,OAAO,MAAMI,gBAAgB,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EAChD,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAGhB,QAAQ,CAAC,MAAM;IAC3D;IACA,MAAMiB,SAAS,GAAGC,YAAY,CAACC,OAAO,CAAC,mBAAmB,CAAC;IAC3D,IAAIF,SAAS,EAAE,OAAOA,SAAS;;IAE/B;IACA,MAAMG,WAAW,GAAGC,SAAS,CAACC,QAAQ,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IACpD;IACA,MAAMC,kBAAkB,GAAG,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC;IAC7C,OAAOA,kBAAkB,CAACC,QAAQ,CAACL,WAAW,CAAC,GAAGA,WAAW,GAAG,IAAI;EACtE,CAAC,CAAC;EAEF,MAAM,CAACM,YAAY,EAAEC,eAAe,CAAC,GAAG3B,QAAQ,CAAC,CAAC,CAAC,CAAC;EACpD,MAAM,CAAC4B,SAAS,EAAEC,YAAY,CAAC,GAAG7B,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAAC8B,KAAK,EAAEC,QAAQ,CAAC,GAAG/B,QAAQ,CAAC,IAAI,CAAC;EAExCE,SAAS,CAAC,MAAM;IACd,MAAM8B,gBAAgB,GAAG,MAAAA,CAAA,KAAY;MACnC,IAAI;QACFH,YAAY,CAAC,IAAI,CAAC;QAClBE,QAAQ,CAAC,IAAI,CAAC;QAEdE,OAAO,CAACC,GAAG,CAAC,4BAA4BnB,eAAe,KAAK,CAAC;QAC7D;QACA,MAAMoB,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGC,MAAM,CAACC,QAAQ,CAACC,MAAM,YAAYxB,eAAe,OAAO,CAAC;QACzF,IAAI,CAACoB,QAAQ,CAACK,EAAE,EAAE;UAChB,MAAM,IAAI7B,KAAK,CAAC,kBAAkBI,eAAe,0BAA0BoB,QAAQ,CAACM,MAAM,GAAG,CAAC;QAChG;QAEA,MAAMC,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;QAClCV,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEQ,IAAI,CAAC;QAEzC,IAAI,CAACA,IAAI,IAAIE,MAAM,CAACC,IAAI,CAACH,IAAI,CAAC,CAACI,MAAM,KAAK,CAAC,EAAE;UAC3C,MAAM,IAAInC,KAAK,CAAC,2BAA2B,CAAC;QAC9C;QAEAgB,eAAe,CAACe,IAAI,CAAC;QACrBT,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAC;;QAE5C;QACAa,QAAQ,CAACC,eAAe,CAACC,IAAI,GAAGlC,eAAe;QAC/CgC,QAAQ,CAACG,GAAG,GAAGnC,eAAe,KAAK,IAAI,GAAG,KAAK,GAAG,KAAK;;QAEvD;QACAG,YAAY,CAACiC,OAAO,CAAC,mBAAmB,EAAEpC,eAAe,CAAC;MAC5D,CAAC,CAAC,OAAOe,KAAK,EAAE;QACdG,OAAO,CAACH,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;QACnDC,QAAQ,CAACD,KAAK,CAACsB,OAAO,CAAC;;QAEvB;QACA,IAAIrC,eAAe,KAAK,IAAI,EAAE;UAC5BkB,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAC;UACtClB,kBAAkB,CAAC,IAAI,CAAC;QAC1B,CAAC,MAAM;UACL;UACAiB,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAC;UAC5CP,eAAe,CAAC;YACd0B,GAAG,EAAE;cACHC,IAAI,EAAE,MAAM;cACZC,KAAK,EAAE,OAAO;cACdC,OAAO,EAAE,SAAS;cAClBC,OAAO,EAAE,SAAS;cAClBC,OAAO,EAAE,SAAS;cAClBC,IAAI,EAAE;gBACJC,QAAQ,EAAE,sBAAsB;gBAChCN,IAAI,EAAE,iBAAiB;gBACvBC,KAAK,EAAE,kBAAkB;gBACzBC,OAAO,EAAE,oBAAoB;gBAC7BC,OAAO,EAAE,sBAAsB;gBAC/BC,OAAO,EAAE;cACX;YACF;UACF,CAAC,CAAC;QACJ;MACF,CAAC,SAAS;QACR7B,YAAY,CAAC,KAAK,CAAC;MACrB;IACF,CAAC;IAEDG,gBAAgB,CAAC,CAAC;EACpB,CAAC,EAAE,CAACjB,eAAe,CAAC,CAAC;EAErB,MAAM8C,cAAc,GAAG,MAAOC,QAAQ,IAAK;IACzC,IAAI;MACFjC,YAAY,CAAC,IAAI,CAAC;MAClB;MACA,MAAMM,QAAQ,GAAG,MAAMC,KAAK,CAAC,YAAY0B,QAAQ,OAAO,CAAC;MACzD,IAAI,CAAC3B,QAAQ,CAACK,EAAE,EAAE;QAChB,MAAM,IAAI7B,KAAK,CAAC,kBAAkBmD,QAAQ,eAAe,CAAC;MAC5D;MACA,MAAMpB,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;MAClChB,eAAe,CAACe,IAAI,CAAC;MACrB1B,kBAAkB,CAAC8C,QAAQ,CAAC;MAC5B/B,QAAQ,CAAC,IAAI,CAAC;IAChB,CAAC,CAAC,OAAOD,KAAK,EAAE;MACdG,OAAO,CAACH,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAChDC,QAAQ,CAACD,KAAK,CAACsB,OAAO,CAAC;IACzB,CAAC,SAAS;MACRvB,YAAY,CAAC,KAAK,CAAC;IACrB;EACF,CAAC;EAED,MAAMkC,CAAC,GAAGA,CAACC,GAAG,EAAEC,MAAM,GAAG,CAAC,CAAC,KAAK;IAC9B,IAAI,CAACvC,YAAY,IAAIkB,MAAM,CAACC,IAAI,CAACnB,YAAY,CAAC,CAACoB,MAAM,KAAK,CAAC,EAAE;MAC3D,OAAOkB,GAAG;IACZ;IAEA,IAAI;MACF,MAAMnB,IAAI,GAAGmB,GAAG,CAACzC,KAAK,CAAC,GAAG,CAAC;MAC3B,IAAI2C,WAAW,GAAGxC,YAAY;MAE9B,KAAK,MAAMyC,CAAC,IAAItB,IAAI,EAAE;QACpBqB,WAAW,GAAGA,WAAW,CAACC,CAAC,CAAC;QAC5B,IAAID,WAAW,KAAKE,SAAS,EAAE;UAC7BnC,OAAO,CAACoC,IAAI,CAAC,8BAA8BL,GAAG,EAAE,CAAC;UACjD,OAAOA,GAAG;QACZ;MACF;;MAEA;MACA,IAAIM,MAAM,GAAGJ,WAAW;MACxBtB,MAAM,CAAC2B,OAAO,CAACN,MAAM,CAAC,CAACO,OAAO,CAAC,CAAC,CAACC,KAAK,EAAEC,KAAK,CAAC,KAAK;QACjDJ,MAAM,GAAGA,MAAM,CAACK,OAAO,CAAC,IAAIF,KAAK,GAAG,EAAEC,KAAK,CAAC;MAC9C,CAAC,CAAC;MAEF,OAAOJ,MAAM;IACf,CAAC,CAAC,OAAOxC,KAAK,EAAE;MACdG,OAAO,CAACoC,IAAI,CAAC,0BAA0BL,GAAG,EAAE,EAAElC,KAAK,CAAC;MACpD,OAAOkC,GAAG;IACZ;EACF,CAAC;EAED,MAAMY,YAAY,GAAGA,CAACC,MAAM,EAAEC,OAAO,GAAG,CAAC,CAAC,KAAK;IAC7C,IAAI;MACF,OAAO,IAAIC,IAAI,CAACC,YAAY,CAACjE,eAAe,EAAE+D,OAAO,CAAC,CAACG,MAAM,CAACJ,MAAM,CAAC;IACvE,CAAC,CAAC,OAAO/C,KAAK,EAAE;MACdG,OAAO,CAACoC,IAAI,CAAC,0BAA0B,EAAEvC,KAAK,CAAC;MAC/C,OAAO+C,MAAM,CAACK,QAAQ,CAAC,CAAC;IAC1B;EACF,CAAC;EAED,MAAMC,UAAU,GAAGA,CAACC,IAAI,EAAEN,OAAO,GAAG,CAAC,CAAC,KAAK;IACzC,IAAI;MACF,OAAO,IAAIC,IAAI,CAACM,cAAc,CAACtE,eAAe,EAAE+D,OAAO,CAAC,CAACG,MAAM,CAACG,IAAI,CAAC;IACvE,CAAC,CAAC,OAAOtD,KAAK,EAAE;MACdG,OAAO,CAACoC,IAAI,CAAC,wBAAwB,EAAEvC,KAAK,CAAC;MAC7C,OAAOsD,IAAI,CAACE,kBAAkB,CAAC,CAAC;IAClC;EACF,CAAC;EAED,MAAMZ,KAAK,GAAG;IACZ3D,eAAe;IACf8C,cAAc;IACdE,CAAC;IACDa,YAAY;IACZO,UAAU;IACVvD,SAAS;IACTE,KAAK;IACLJ;EACF,CAAC;EAED,IAAIE,SAAS,EAAE;IACb,oBACEtB,OAAA,CAACF,GAAG;MACFmF,OAAO,EAAC,MAAM;MACdC,cAAc,EAAC,QAAQ;MACvBC,UAAU,EAAC,QAAQ;MACnBC,SAAS,EAAC,OAAO;MAAA7E,QAAA,eAEjBP,OAAA,CAACH,gBAAgB;QAAAwF,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACjB,CAAC;EAEV;EAEA,IAAIhE,KAAK,IAAIf,eAAe,KAAK,IAAI,EAAE;IACrC,oBACET,OAAA,CAACF,GAAG;MACFmF,OAAO,EAAC,MAAM;MACdC,cAAc,EAAC,QAAQ;MACvBC,UAAU,EAAC,QAAQ;MACnBC,SAAS,EAAC,OAAO;MACjBK,KAAK,EAAC,YAAY;MAAAlF,QAAA,GACnB,8BAC6B,EAACiB,KAAK;IAAA;MAAA6D,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC/B,CAAC;EAEV;EAEA,oBACExF,OAAA,CAACC,eAAe,CAACyF,QAAQ;IAACtB,KAAK,EAAEA,KAAM;IAAA7D,QAAA,EACpCA;EAAQ;IAAA8E,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACe,CAAC;AAE/B,CAAC;AAAChF,GAAA,CAlMWF,gBAAgB;AAAAqF,EAAA,GAAhBrF,gBAAgB;AAoM7B,eAAeL,eAAe;AAAC,IAAA0F,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}