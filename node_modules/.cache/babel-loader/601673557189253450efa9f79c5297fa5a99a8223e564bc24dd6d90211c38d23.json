{"ast":null,"code":"const CONVERSION_FACTORS={length:{base:'meter',factors:{meter:1,kilometer:1000,centimeter:0.01,millimeter:0.001,mile:1609.344,yard:0.9144,foot:0.3048,inch:0.0254}},temperature:{base:'celsius',formulas:{celsius:{fahrenheit:c=>c*9/5+32,kelvin:c=>c+273.15},fahrenheit:{celsius:f=>(f-32)*5/9,kelvin:f=>(f-32)*5/9+273.15},kelvin:{celsius:k=>k-273.15,fahrenheit:k=>(k-273.15)*9/5+32}}},weight:{base:'kilogram',factors:{kilogram:1,gram:1000,milligram:1000000,pound:2.20462,ounce:35.274,ton:0.001}},volume:{base:'liter',factors:{liter:1,milliliter:1000,gallon:0.264172,quart:1.05669,pint:2.11338,cup:4.22675,fluidounce:33.814,cubicmeter:0.001}},area:{base:'squaremeter',factors:{squaremeter:1,squarekilometer:0.000001,hectare:0.0001,acre:0.000247105,squarefoot:10.7639,squareinch:1550}},time:{base:'second',factors:{second:1,minute:1/60,hour:1/3600,day:1/86400,week:1/604800,month:1/2592000,year:1/31536000}}};const API_BASE_URL=process.env.REACT_APP_API_URL||'http://localhost:5000';class ConversionService{static async convert(value,fromUnit,toUnit,category){try{const response=await fetch(\"\".concat(API_BASE_URL,\"/api/convert\"),{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({category,fromUnit,toUnit,value:parseFloat(value)})});if(!response.ok){const error=await response.json();throw new Error(error.error||'Failed to convert');}return await response.json();}catch(error){console.error('Conversion error:',error);throw error;}}static async getFormula(fromUnit,toUnit,category){try{const response=await fetch(\"\".concat(API_BASE_URL,\"/formula?category=\").concat(category,\"&fromUnit=\").concat(fromUnit,\"&toUnit=\").concat(toUnit));if(!response.ok){const error=await response.json();throw new Error(error.error||'Failed to get formula');}return await response.json();}catch(error){console.error('Formula error:',error);throw error;}}static async getCategories(){try{const response=await fetch(\"\".concat(API_BASE_URL,\"/categories\"));if(!response.ok){const error=await response.json();throw new Error(error.error||'Failed to get categories');}return await response.json();}catch(error){console.error('Categories error:',error);throw error;}}static async getUnits(category){try{const response=await fetch(\"\".concat(API_BASE_URL,\"/units/\").concat(category));if(!response.ok){const error=await response.json();throw new Error(error.error||'Failed to get units');}return await response.json();}catch(error){console.error('Units error:',error);throw error;}}static getCommonConversions(category){switch(category){case'length':return[{from:'1 meter',to:'3.28084 feet',description:'Height of a person'},{from:'1 kilometer',to:'0.621371 miles',description:'Distance between cities'},{from:'1 inch',to:'2.54 centimeters',description:'Small measurements'}];case'temperature':return[{from:'0°C',to:'32°F',description:'Freezing point of water'},{from:'100°C',to:'212°F',description:'Boiling point of water'},{from:'37°C',to:'98.6°F',description:'Normal body temperature'}];case'weight':return[{from:'1 kilogram',to:'2.20462 pounds',description:'Average bag of flour'},{from:'1 pound',to:'453.592 grams',description:'Standard weight measure'},{from:'1 ounce',to:'28.3495 grams',description:'Small weight measure'}];// Add more categories\ndefault:return[];}}}export default ConversionService;","map":{"version":3,"names":["CONVERSION_FACTORS","length","base","factors","meter","kilometer","centimeter","millimeter","mile","yard","foot","inch","temperature","formulas","celsius","fahrenheit","c","kelvin","f","k","weight","kilogram","gram","milligram","pound","ounce","ton","volume","liter","milliliter","gallon","quart","pint","cup","fluidounce","cubicmeter","area","squaremeter","squarekilometer","hectare","acre","squarefoot","squareinch","time","second","minute","hour","day","week","month","year","API_BASE_URL","process","env","REACT_APP_API_URL","ConversionService","convert","value","fromUnit","toUnit","category","response","fetch","concat","method","headers","body","JSON","stringify","parseFloat","ok","error","json","Error","console","getFormula","getCategories","getUnits","getCommonConversions","from","to","description"],"sources":["/home/sifann/workspace/src/services/ConversionService.js"],"sourcesContent":["const CONVERSION_FACTORS = {\r\n  length: {\r\n    base: 'meter',\r\n    factors: {\r\n      meter: 1,\r\n      kilometer: 1000,\r\n      centimeter: 0.01,\r\n      millimeter: 0.001,\r\n      mile: 1609.344,\r\n      yard: 0.9144,\r\n      foot: 0.3048,\r\n      inch: 0.0254,\r\n    },\r\n  },\r\n  temperature: {\r\n    base: 'celsius',\r\n    formulas: {\r\n      celsius: {\r\n        fahrenheit: (c) => (c * 9/5) + 32,\r\n        kelvin: (c) => c + 273.15,\r\n      },\r\n      fahrenheit: {\r\n        celsius: (f) => (f - 32) * 5/9,\r\n        kelvin: (f) => (f - 32) * 5/9 + 273.15,\r\n      },\r\n      kelvin: {\r\n        celsius: (k) => k - 273.15,\r\n        fahrenheit: (k) => (k - 273.15) * 9/5 + 32,\r\n      },\r\n    },\r\n  },\r\n  weight: {\r\n    base: 'kilogram',\r\n    factors: {\r\n      kilogram: 1,\r\n      gram: 1000,\r\n      milligram: 1000000,\r\n      pound: 2.20462,\r\n      ounce: 35.274,\r\n      ton: 0.001,\r\n    },\r\n  },\r\n  volume: {\r\n    base: 'liter',\r\n    factors: {\r\n      liter: 1,\r\n      milliliter: 1000,\r\n      gallon: 0.264172,\r\n      quart: 1.05669,\r\n      pint: 2.11338,\r\n      cup: 4.22675,\r\n      fluidounce: 33.814,\r\n      cubicmeter: 0.001,\r\n    },\r\n  },\r\n  area: {\r\n    base: 'squaremeter',\r\n    factors: {\r\n      squaremeter: 1,\r\n      squarekilometer: 0.000001,\r\n      hectare: 0.0001,\r\n      acre: 0.000247105,\r\n      squarefoot: 10.7639,\r\n      squareinch: 1550,\r\n    },\r\n  },\r\n  time: {\r\n    base: 'second',\r\n    factors: {\r\n      second: 1,\r\n      minute: 1/60,\r\n      hour: 1/3600,\r\n      day: 1/86400,\r\n      week: 1/604800,\r\n      month: 1/2592000,\r\n      year: 1/31536000,\r\n    },\r\n  },\r\n};\r\n\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\r\n\r\nclass ConversionService {\r\n  static async convert(value, fromUnit, toUnit, category) {\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/api/convert`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          category,\r\n          fromUnit,\r\n          toUnit,\r\n          value: parseFloat(value)\r\n        })\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const error = await response.json();\r\n        throw new Error(error.error || 'Failed to convert');\r\n      }\r\n      return await response.json();\r\n    } catch (error) {\r\n      console.error('Conversion error:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  static async getFormula(fromUnit, toUnit, category) {\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/formula?category=${category}&fromUnit=${fromUnit}&toUnit=${toUnit}`);\r\n      if (!response.ok) {\r\n        const error = await response.json();\r\n        throw new Error(error.error || 'Failed to get formula');\r\n      }\r\n      return await response.json();\r\n    } catch (error) {\r\n      console.error('Formula error:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  static async getCategories() {\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/categories`);\r\n      if (!response.ok) {\r\n        const error = await response.json();\r\n        throw new Error(error.error || 'Failed to get categories');\r\n      }\r\n      return await response.json();\r\n    } catch (error) {\r\n      console.error('Categories error:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  static async getUnits(category) {\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/units/${category}`);\r\n      if (!response.ok) {\r\n        const error = await response.json();\r\n        throw new Error(error.error || 'Failed to get units');\r\n      }\r\n      return await response.json();\r\n    } catch (error) {\r\n      console.error('Units error:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  static getCommonConversions(category) {\r\n    switch (category) {\r\n      case 'length':\r\n        return [\r\n          { from: '1 meter', to: '3.28084 feet', description: 'Height of a person' },\r\n          { from: '1 kilometer', to: '0.621371 miles', description: 'Distance between cities' },\r\n          { from: '1 inch', to: '2.54 centimeters', description: 'Small measurements' },\r\n        ];\r\n      case 'temperature':\r\n        return [\r\n          { from: '0°C', to: '32°F', description: 'Freezing point of water' },\r\n          { from: '100°C', to: '212°F', description: 'Boiling point of water' },\r\n          { from: '37°C', to: '98.6°F', description: 'Normal body temperature' },\r\n        ];\r\n      case 'weight':\r\n        return [\r\n          { from: '1 kilogram', to: '2.20462 pounds', description: 'Average bag of flour' },\r\n          { from: '1 pound', to: '453.592 grams', description: 'Standard weight measure' },\r\n          { from: '1 ounce', to: '28.3495 grams', description: 'Small weight measure' },\r\n        ];\r\n      // Add more categories\r\n      default:\r\n        return [];\r\n    }\r\n  }\r\n}\r\n\r\nexport default ConversionService; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}